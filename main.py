from sklearn.metrics import mean_squared_error
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential # type: ignore
from tensorflow.keras.layers import LSTM, Dense # type: ignore
import datetime

def PM25():
    # üü¢ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 (‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
    @st.cache_data
    def load_data():
        df = pd.read_csv("Weather_chiangmai.csv", parse_dates=["Date"], dayfirst=True)  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        df["Date"] = pd.to_datetime(df["Date"], dayfirst=True)   # ‡∏£‡∏∞‡∏ö‡∏∏ dayfirst=True
        df = df.dropna()  # ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ Missing
        return df

    # üü¢ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LSTM
    def prepare_data(df, feature_cols=['Pressure_max', 'Pressure_min', 'Pressure_avg', 'Temp_max', 'Temp_min', 'Temp_avg', 
                                      'Humidity_max', 'Humidity_min', 'Humidity_avg', 'Precipitation', 'Sunshine', 
                                      'Evaporation', 'Wind_direct', 'Wind_speed'], target_col='PM25', lookback=24):
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô DataFrame ‡∏Å‡πà‡∏≠‡∏ô
        available_cols = df.columns
        print("Available columns:", available_cols)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        data = df[feature_cols + [target_col]].values  
        scaler = MinMaxScaler()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß Scaling
        data_scaled = scaler.fit_transform(data)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
        
        X, y = [], []
        for i in range(len(data_scaled) - lookback):
            X.append(data_scaled[i:i+lookback, :-1])  # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡πà‡∏≤ PM25
            y.append(data_scaled[i+lookback, -1])  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á PM25 ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        
        return np.array(X), np.array(y), scaler  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ X, y ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß scaler

    # üü¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• LSTM
    def build_lstm_model(input_shape):
        model = Sequential([ 
            LSTM(50, activation='relu', return_sequences=True, input_shape=input_shape),
            LSTM(50, activation='relu'),
            Dense(1)
        ])
        model.compile(optimizer='adam', loss='mse')
        return model

    # üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Streamlit UI
    st.title("üìä PM2.5 Forecasting using LSTM")

    # üü° ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
    selected_date = st.sidebar.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô", datetime.date(2016, 7, 11))

    # üü° ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = load_data()

    # üü° ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    df_filtered = df[df["Date"] == pd.to_datetime(selected_date)]

    # üü° ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.write("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:")
    st.dataframe(df_filtered.head())

    # üü° ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
    if not df_filtered.empty:
        X, y, scaler = prepare_data(df)  # ‡πÄ‡∏ó‡∏£‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        st.write(f"### Data Prepared: {X_train.shape[0]} training samples and {X_test.shape[0]} testing samples")

        # üü° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏• LSTM
        model = build_lstm_model((X.shape[1], X.shape[2]))
        st.write("### Training Model...")
        model.fit(X_train, y_train, epochs=10, batch_size=16, verbose=1)

        # üü° ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ PM2.5
        st.write("### Making Predictions...")
        X_selected = scaler.transform(df_filtered[[
            'Pressure_max', 'Pressure_min', 'Pressure_avg', 'Temp_max', 'Temp_min', 'Temp_avg', 
            'Humidity_max', 'Humidity_min', 'Humidity_avg', 'Precipitation', 'Sunshine', 'Evaporation', 
            'Wind_direct', 'Wind_speed']].values)  # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        X_selected = np.expand_dims(X_selected, axis=0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        y_pred = model.predict(X_selected)
        y_pred_inv = scaler.inverse_transform(np.concatenate((X_selected[0, :, :-1], y_pred), axis=1))[:, -1]

        st.write(f"### Predicted PM2.5 for {selected_date}: {y_pred_inv[0]}")

        st.success("‚úÖ Prediction Completed!")
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")

def main(): 
    page = st.selectbox("Select a page", ["PM25"])  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô selectbox ‡πÅ‡∏ó‡∏ô sidebar
    if page == "PM25":
        st.title("PM25 Forecasting")
        PM25() 

if __name__ == "__main__":
    main()


